package ana.backups;

import java.awt.Color;
import java.awt.geom.Point2D;
import java.io.File;

import ana.geotools.Lambert;
import ana.visionrange.ActionDistance;
import ana.visionrange.TiffMethod;
import ij.IJ;
import ij.ImagePlus;
import ij.gui.OvalRoi;
import ij.gui.PointRoi;
import ij.io.ImageReader;
import ij.io.Opener;
import ij.process.ImageProcessor;
import mil.nga.tiff.Rasters;

public class DrawByIJ {
	
	/**
	 * 该方法使用ImageJ进行绘图
	 * @param lat0 绘图中心点的纬度
	 * @param lon0 绘图中心点的经度
	 * @param rMax 绘图最大半径范围
	 */
	public static void createDemMapByIJ(double lat0, double lon0, double rMax) {
		long startTime = System.currentTimeMillis();   //获取开始时间
		// 中心坐标，外部传入
		//lat0 = 38.0589416667;
		//lon0 = 106.2028888889;
		
		// 给一个hMax，外部传入
		double hMax = 6000;
		
		// 搜索步长
		double d = rMax/400; // 在800x800像素大小不出现断线的最大搜索步长，最好不再修改
		
		// 设置压缩因子
		double compressCoef = rMax/400;  // 在800x800像素大小下的绝对压缩因子，不可再修改
		
		// 打开9个srtm文件
		// 中心
		String srtmName0 = TiffMethod.getTiffMom(lat0, lon0);
		File srtmFile0 = TiffMethod.getTiffFile2(srtmName0);
		Rasters rasters0 = TiffMethod.getRasters(srtmFile0);
		
		// 左上角
		String srtmName1 = TiffMethod.getTiffMom(lat0+5, lon0-5);
		File srtmFile1 = TiffMethod.getTiffFile2(srtmName1);
		Rasters rasters1 = TiffMethod.getRasters(srtmFile1);
		
		// 正上
		String srtmName2 = TiffMethod.getTiffMom(lat0+5, lon0);
		File srtmFile2 = TiffMethod.getTiffFile2(srtmName2);
		Rasters rasters2 = TiffMethod.getRasters(srtmFile2);
		
		// 右上角
		String srtmName3 = TiffMethod.getTiffMom(lat0+5, lon0+5);
		File srtmFile3 = TiffMethod.getTiffFile2(srtmName3);
		Rasters rasters3 = TiffMethod.getRasters(srtmFile3);
		
		// 正右
		String srtmName5 = TiffMethod.getTiffMom(lat0, lon0+5);
		File srtmFile5 = TiffMethod.getTiffFile2(srtmName5);
		Rasters rasters5 = TiffMethod.getRasters(srtmFile5);
		
		// 右下角
		String srtmName7 = TiffMethod.getTiffMom(lat0-5, lon0+5);
		File srtmFile7 = TiffMethod.getTiffFile2(srtmName7);
		Rasters rasters7 = TiffMethod.getRasters(srtmFile7);
		
		// 正下
		String srtmName4 = TiffMethod.getTiffMom(lat0-5, lon0);
		File srtmFile4 = TiffMethod.getTiffFile2(srtmName4);
		Rasters rasters4 = TiffMethod.getRasters(srtmFile4);
		
		// 左下角
		String srtmName6 = TiffMethod.getTiffMom(lat0-5, lon0-5);
		File srtmFile6 = TiffMethod.getTiffFile2(srtmName6);
		Rasters rasters6 = TiffMethod.getRasters(srtmFile6);
		
		// 正左
		String srtmName8 = TiffMethod.getTiffMom(lat0, lon0-5);
		File srtmFile8 = TiffMethod.getTiffFile2(srtmName8);
		Rasters rasters8 = TiffMethod.getRasters(srtmFile8);
		
		// 创建图片及其尺寸
		ImagePlus imp = IJ.createImage("DEM-MAP", 800, 800, 1, 24);
		ImageProcessor ip = imp.getProcessor();
		//ImagePlus imd = IJ.open();
		
		// 开始绘画，通过反兰伯特变换来控制绘画范围
		
		// x 和 y 是相对于图像中心点的相对距离
		double x = 0;
		double y = 0;
		
		// 实时srtm文件
		String srtmName = srtmName0;
		Rasters rasters = rasters0;
		
		// 画左上角部分
		for(x = 0; Math.abs(x)<=rMax; x-=d) {
			for(y = 0; Math.abs(y)<=rMax; y+=d) {
				// 进行兰伯特反变换，求出实际经纬度
				Point2D.Double LatAndLon = Lambert.arclambert(y, x, lat0, lon0);
				double lat = LatAndLon.y;
				double lon = LatAndLon.x;
				// 根据lat,lon及其所属文件求出索引经纬度
				double latR = TiffMethod.getIndex(srtmName.substring(8, 10));
				double lonR = TiffMethod.getIndexLon(srtmName.substring(5, 7));
				// 计算该点的实际位置
				int i = TiffMethod.getX(lon, lonR);
				int j = TiffMethod.getY(lat, latR);
				// 如果该点超出了[0,6000]的取值范围，则根据lat,lon判断应该打开的新的srtm文件，替换原来的srtm文件
				if(i<0||i>6000||j<0||j>6000) {
					srtmName = TiffMethod.getTiffMom(lat, lon);
					// 如果能从传入的文件中找到，则直接使用，不用再次打开；如果找不到，则再次打开新文件
					if(srtmName.equals(srtmName0)) {
						rasters = rasters0;
					}
					else if(srtmName.equals(srtmName1)) {
						rasters = rasters1;
					}
					else if(srtmName.equals(srtmName2)) {
						rasters = rasters2;
					}
					else if(srtmName.equals(srtmName3)) {
						rasters = rasters3;
					}
					else if(srtmName.equals(srtmName4)) {
						rasters = rasters4;
					}
					else if(srtmName.equals(srtmName5)) {
						rasters = rasters5;
					}
					else if(srtmName.equals(srtmName6)) {
						rasters = rasters6;
					}
					else if(srtmName.equals(srtmName7)) {
						rasters = rasters7;
					}
					else if(srtmName.equals(srtmName8)) {
						rasters = rasters8;
					}
					else {
						rasters = TiffMethod.getRasters(TiffMethod.getTiffFile2(srtmName));
					}
					// 为了确保顺利向下执行，再次执行求i，j操作
					latR = TiffMethod.getIndex(srtmName.substring(8, 10));
					lonR = TiffMethod.getIndexLon(srtmName.substring(5, 7));
					i = TiffMethod.getX(lon, lonR);
					j = TiffMethod.getY(lat, latR);
					if(j==6001) {
						j=6000;
					}
					if(i==6001) {
						i=6000;
					}
				}
				// 读出高度值
				double h = rasters.getPixel(i, j)[0].doubleValue();
				// 根据高度值配色，并为画笔配色
				int[] rgb = setColor(h, hMax);
				Color color = new Color(rgb[0], rgb[1], rgb[2]);
				ip.setColor(color);
				// 找到绘画的实际像素坐标
				int posX = 400 + (int) Math.round( -(-x/compressCoef) );
				int posY = 400 + (int) Math.round( -(y/compressCoef) );
				// 绘制该点
				PointRoi pRoi = new PointRoi(posX,posY);
				ip.draw(pRoi);
			}
		}
		
		// 画右上角部分
		for(x = 0; Math.abs(x)<=rMax; x+=d) {
			for(y = 0; Math.abs(y)<=rMax; y+=d) {
				// 进行兰伯特反变换，求出实际经纬度
				Point2D.Double LatAndLon = Lambert.arclambert(y, x, lat0, lon0);
				double lat = LatAndLon.y;
				double lon = LatAndLon.x;
				// 根据lat,lon及其所属文件求出索引经纬度
				double latR = TiffMethod.getIndex(srtmName.substring(8, 10));
				double lonR = TiffMethod.getIndexLon(srtmName.substring(5, 7));
				// 计算该点的实际位置
				int i = TiffMethod.getX(lon, lonR);
				int j = TiffMethod.getY(lat, latR);
				// 如果该点超出了[0,6000]的取值范围，则根据lat,lon判断应该打开的新的srtm文件，替换原来的srtm文件
				if(i<0||i>6000||j<0||j>6000) {
					srtmName = TiffMethod.getTiffMom(lat, lon);
					// 如果能从传入的文件中找到，则直接使用，不用再次打开；如果找不到，则再次打开新文件
					if(srtmName.equals(srtmName0)) {
						rasters = rasters0;
					}
					else if(srtmName.equals(srtmName1)) {
						rasters = rasters1;
					}
					else if(srtmName.equals(srtmName2)) {
						rasters = rasters2;
					}
					else if(srtmName.equals(srtmName3)) {
						rasters = rasters3;
					}
					else if(srtmName.equals(srtmName4)) {
						rasters = rasters4;
					}
					else if(srtmName.equals(srtmName5)) {
						rasters = rasters5;
					}
					else if(srtmName.equals(srtmName6)) {
						rasters = rasters6;
					}
					else if(srtmName.equals(srtmName7)) {
						rasters = rasters7;
					}
					else if(srtmName.equals(srtmName8)) {
						rasters = rasters8;
					}
					else {
						rasters = TiffMethod.getRasters(TiffMethod.getTiffFile2(srtmName));
					}
					// 为了确保顺利向下执行，再次执行求i，j操作
					latR = TiffMethod.getIndex(srtmName.substring(8, 10));
					lonR = TiffMethod.getIndexLon(srtmName.substring(5, 7));
					i = TiffMethod.getX(lon, lonR);
					j = TiffMethod.getY(lat, latR);
					if(j==6001) {
						j=6000;
					}
					if(i==6001) {
						i=6000;
					}
				}
				// 读出高度值
				double h = rasters.getPixel(i, j)[0].doubleValue();
				// 根据高度值配色，并为画笔配色
				int[] rgb = setColor(h, hMax);
				Color color = new Color(rgb[0], rgb[1], rgb[2]);
				ip.setColor(color);
				// 找到绘画的实际像素坐标
				int posX = 400 + (int) Math.round( (x/compressCoef) );
				int posY = 400 + (int) Math.round( (-y/compressCoef) );
				// 绘制该点
				PointRoi pRoi = new PointRoi(posX,posY);
				ip.draw(pRoi);
			}
		}
		
		// 画右下角部分
		for(x = 0; Math.abs(x)<=rMax; x+=d) {
			for(y = 0; Math.abs(y)<=rMax; y-=d) {
				// 进行兰伯特反变换，求出实际经纬度
				Point2D.Double LatAndLon = Lambert.arclambert(y, x, lat0, lon0);
				double lat = LatAndLon.y;
				double lon = LatAndLon.x;
				// 根据lat,lon及其所属文件求出索引经纬度
				double latR = TiffMethod.getIndex(srtmName.substring(8, 10));
				double lonR = TiffMethod.getIndexLon(srtmName.substring(5, 7));
				// 计算该点的实际位置
				int i = TiffMethod.getX(lon, lonR);
				int j = TiffMethod.getY(lat, latR);
				// 如果该点超出了[0,6000]的取值范围，则根据lat,lon判断应该打开的新的srtm文件，替换原来的srtm文件
				if(i<0||i>6000||j<0||j>6000) {
					srtmName = TiffMethod.getTiffMom(lat, lon);
					// 如果能从传入的文件中找到，则直接使用，不用再次打开；如果找不到，则再次打开新文件
					if(srtmName.equals(srtmName0)) {
						rasters = rasters0;
					}
					else if(srtmName.equals(srtmName1)) {
						rasters = rasters1;
					}
					else if(srtmName.equals(srtmName2)) {
						rasters = rasters2;
					}
					else if(srtmName.equals(srtmName3)) {
						rasters = rasters3;
					}
					else if(srtmName.equals(srtmName4)) {
						rasters = rasters4;
					}
					else if(srtmName.equals(srtmName5)) {
						rasters = rasters5;
					}
					else if(srtmName.equals(srtmName6)) {
						rasters = rasters6;
					}
					else if(srtmName.equals(srtmName7)) {
						rasters = rasters7;
					}
					else if(srtmName.equals(srtmName8)) {
						rasters = rasters8;
					}
					else {
						rasters = TiffMethod.getRasters(TiffMethod.getTiffFile2(srtmName));
					}
					// 为了确保顺利向下执行，再次执行求i，j操作
					latR = TiffMethod.getIndex(srtmName.substring(8, 10));
					lonR = TiffMethod.getIndexLon(srtmName.substring(5, 7));
					i = TiffMethod.getX(lon, lonR);
					j = TiffMethod.getY(lat, latR);
					if(j==6001) {
						j=6000;
					}
					if(i==6001) {
						i=6000;
					}
				}
				// 读出高度值
				double h = rasters.getPixel(i, j)[0].doubleValue();
				// 根据高度值配色，并为画笔配色
				int[] rgb = setColor(h, hMax);
				Color color = new Color(rgb[0], rgb[1], rgb[2]);
				ip.setColor(color);
				// 找到绘画的实际像素坐标
				int posX = 400 + (int) Math.round( (x/compressCoef) );
				int posY = 400 + (int) Math.round( (-y/compressCoef) );
				// 绘制该点
				PointRoi pRoi = new PointRoi(posX,posY);
				ip.draw(pRoi);
			}
		}
		
		// 画右上角部分
		for(x = 0; Math.abs(x)<=rMax; x-=d) {
			for(y = 0; Math.abs(y)<=rMax; y-=d) {
				// 进行兰伯特反变换，求出实际经纬度
				Point2D.Double LatAndLon = Lambert.arclambert(y, x, lat0, lon0);
				double lat = LatAndLon.y;
				double lon = LatAndLon.x;
				// 根据lat,lon及其所属文件求出索引经纬度
				double latR = TiffMethod.getIndex(srtmName.substring(8, 10));
				double lonR = TiffMethod.getIndexLon(srtmName.substring(5, 7));
				// 计算该点的实际位置
				int i = TiffMethod.getX(lon, lonR);
				int j = TiffMethod.getY(lat, latR);
				// 如果该点超出了[0,6000]的取值范围，则根据lat,lon判断应该打开的新的srtm文件，替换原来的srtm文件
				if(i<0||i>6000||j<0||j>6000) {
					srtmName = TiffMethod.getTiffMom(lat, lon);
					// 如果能从传入的文件中找到，则直接使用，不用再次打开；如果找不到，则再次打开新文件
					if(srtmName.equals(srtmName0)) {
						rasters = rasters0;
					}
					else if(srtmName.equals(srtmName1)) {
						rasters = rasters1;
					}
					else if(srtmName.equals(srtmName2)) {
						rasters = rasters2;
					}
					else if(srtmName.equals(srtmName3)) {
						rasters = rasters3;
					}
					else if(srtmName.equals(srtmName4)) {
						rasters = rasters4;
					}
					else if(srtmName.equals(srtmName5)) {
						rasters = rasters5;
					}
					else if(srtmName.equals(srtmName6)) {
						rasters = rasters6;
					}
					else if(srtmName.equals(srtmName7)) {
						rasters = rasters7;
					}
					else if(srtmName.equals(srtmName8)) {
						rasters = rasters8;
					}
					else {
						rasters = TiffMethod.getRasters(TiffMethod.getTiffFile2(srtmName));
					}
					// 为了确保顺利向下执行，再次执行求i，j操作
					latR = TiffMethod.getIndex(srtmName.substring(8, 10));
					lonR = TiffMethod.getIndexLon(srtmName.substring(5, 7));
					i = TiffMethod.getX(lon, lonR);
					j = TiffMethod.getY(lat, latR);
					if(j==6001) {
						j=6000;
					}
					if(i==6001) {
						i=6000;
					}
				}
				// 读出高度值
				double h = rasters.getPixel(i, j)[0].doubleValue();
				// 根据高度值配色，并为画笔配色
				int[] rgb = setColor(h, hMax);
				Color color = new Color(rgb[0], rgb[1], rgb[2]);
				ip.setColor(color);
				// 找到绘画的实际像素坐标
				int posX = 400 + (int) Math.round( (x/compressCoef) );
				int posY = 400 + (int) Math.round( (-y/compressCoef) );
				// 绘制该点
				PointRoi pRoi = new PointRoi(posX,posY);
				ip.draw(pRoi);
			}
		}
		
		long endTime = System.currentTimeMillis(); //获取结束时间
		System.out.println("程序运行时间： " + (endTime-startTime) + "ms" );
		
		// 测试雷达组网绘制，首先测试4雷达情况
		int radarNum = 4; // 雷达数
		double alt = 3000; // 高度层
		double range = 250000; // 威力范围
		
		// 雷达站址赋值
		double[][] radars = new double[radarNum][3];
		radars[0] = new double[]{38.0589416667, 106.2028888889, 1147};
		radars[1] = new double[]{38.0589412022, 108.303, 1500};
		radars[2] = new double[]{36.0589, 109.459, 1147};
		radars[3] = new double[]{34.5962, 108.456, 1147};
		
		imp.show();
		
		for(int k=0; k<1; k++) {
			
			// 将雷达站从中心平移到其相对于坐标中心的绘图位置，平移量通过兰伯特变换计算
			Point2D.Double pos = new Point2D.Double();
			pos = Lambert.lambert(radars[k][0], radars[k][1], lat0, lon0);
			int xTrans = (int)(pos.x/compressCoef);
			int yTrans = (int)(-pos.y/compressCoef);
			// 雷达站绘图站址
			int radarX = 400 + xTrans;
			int radarY = 400 + yTrans;
			// 绘制雷达站
			Color colorSat = new Color(255, 255, 0, 0);
			ip.setColor(colorSat);
			ip.fillRect(radarX-5, radarY-5, 10, 10);
			
			// 开始绘制覆盖范围图线
			int xLast = 0;
			int yLast = 0;
			ActionDistance.findActionDistanceInfo(radars[k][0], radars[k][1], radars[k][2], 0, range, alt, 90, srtmName0, srtmFile0, rasters0,
					srtmName1, srtmName2, srtmName3, srtmName4, srtmName5, srtmName6, srtmName7, srtmName8,
					rasters1, rasters2, rasters3, rasters4, rasters5, rasters6, rasters7, rasters8);
			double posx0 = ActionDistance.actionLambertX;
			double posy0 = ActionDistance.actionLambertY;
			//
			int posX0 = (int) Math.round( (posx0/compressCoef) );
			int posY0 = (int) Math.round( (-posy0/compressCoef) );
			if(posX0<0) {
				xLast = 400 + posX0;
			}
			else {
				xLast = 400 + posX0;
			}
			
			if(posY0<0) {
				yLast = 400 + posY0;
			}
			else {
				yLast = 400 + posY0;
			}
			xLast += xTrans;
			yLast += yTrans;
			
			for(int i=1; i<=360; i++) {
				ActionDistance.findActionDistanceInfo(radars[k][0], radars[k][1], radars[k][2], i, range, alt, 90, srtmName0, srtmFile0, rasters0,
						srtmName1, srtmName2, srtmName3, srtmName4, srtmName5, srtmName6, srtmName7, srtmName8,
						rasters1, rasters2, rasters3, rasters4, rasters5, rasters6, rasters7, rasters8);
				double posx = ActionDistance.actionLambertX;
				double posy = ActionDistance.actionLambertY;
				// 如果以每一个雷达站为图片中心，xR和yR是其相对于图片中心的实际位置
				int posX = (int) Math.round( (posx/compressCoef) );
				int posY = (int) Math.round( (-posy/compressCoef) );
				int xR = 0;
				int yR = 0;
				if(posX<0) {
					xR = 400 + posX;
				}
				else {
					xR = 400 + posX;
				}
				
				if(posY<0) {
					yR = 400 + posY;
				}
				else {
					yR = 400 + posY;
				}
				// 平移雷达站
				xR += xTrans;
				yR += yTrans;
				// 绘制点
				ip.setLineWidth(2);
				ip.drawLine(xLast, yLast, xR, yR);
				xLast = xR;
				yLast = yR;
			}
			
		}
		
		// 绘制x和y轴
		Color color1 = new Color(0, 0, 255, 0);
		ip.setColor(color1);
		ip.drawLine(400, 0, 400, 800);
		ip.drawLine(0, 400, 800, 400);
		
		// 绘制范围图
		Color color = new Color(255, 0, 0, 0);
		ip.setColor(color);
		OvalRoi oRoi = new OvalRoi(400-100000/compressCoef, 400-100000/compressCoef, 100000/compressCoef*2, 100000/compressCoef*2);
		ip.setLineWidth(0);
		ip.drawRoi(oRoi);
		ip.drawString("100km", (int)(400-100000/compressCoef), 410);
		
		OvalRoi oRoi1 = new OvalRoi(400-200000/compressCoef, 400-200000/compressCoef, 200000/compressCoef*2, 200000/compressCoef*2);
		ip.setLineWidth(0);
		ip.drawRoi(oRoi1);
		ip.drawString("200km", (int)(400-200000/compressCoef), 410);
		
		OvalRoi oRoi2 = new OvalRoi(400-300000/compressCoef, 400-300000/compressCoef, 300000/compressCoef*2, 300000/compressCoef*2);
		ip.setLineWidth(0);
		ip.drawRoi(oRoi2);
		ip.drawString("300km", (int)(400-300000/compressCoef), 410);
		
		ip.fillRect(395, 395, 10, 10);
		ip.drawString("东经："+ lon0, 390, 420);
		ip.drawString("北纬："+ lat0, 390, 440);
		
	}
	
	/**
	 * 该方法使用awt配色
	 */
	public static int[] setColor(double h, double hMax) {
		int[] color = new int[3];
		// 定义64组RGB配色
		int[][] rgbColorArray = new int[][] {
			  { 0,102,51},
			  { 2,106,51},
			  { 5,111,51},
			  { 8,116,52},
			  {12,121,53},
			  {16,126,53},
			  {19,131,54},
			  {24,136,55},
			  {28,140,56},
			  {33,145,57},
			  {38,150,58},
			  {43,155,60},
			  {48,160,62},
			  {54,165,64},
			  { 60,170, 66},
			  { 66,174, 69},
			  { 73,179, 73},
			  { 83,184, 79},
			  { 93,189, 86},
			  {104,194, 93},
			  {114,199,101},
			  {124,203,108},
			  {134,208,116},
			  {145,213,124},
			  {155,218,133},
			  {165,223,141},
			  {175,228,150},
			  {186,233,159},
			  {195,238,169},
			  {205,242,178},
			  {215,247,188},
			  {224,252,198},
			  {226,252,198},
			  {221,247,188},
			  {216,242,178},
			  {211,238,169},
			  {207,233,159},
			  {204,228,150},
			  {200,223,141},
			  {197,218,133},
			  {195,213,124},
			  {192,208,116},
			  {190,204,108},
			  {188,199,101},
			  {187,194, 93},
			  {185,189, 86},
			  {184,184, 79},
			  {179,176,73},
			  {174,167,66},
			  {170,158,60},
			  {165,150,54},
			  {160,141,48},
			  {155,132,43},
			  {150,123,38},
			  {145,114,33},
			  {140,106,28},
			  {136, 97,24},
			  {131, 89,19},
			  {126, 80,16},
			  {121, 72,12},
			  {116, 64, 8},
			  {111, 57, 5},
			  {106, 49, 2},
			  {102, 42, 0}
		};
		
		if(h>0) {
			double dh = hMax/64;
			int RGBIndex = (int) Math.floor(h/dh);
			color[0] = rgbColorArray[RGBIndex][0];
			color[1] = rgbColorArray[RGBIndex][1];
			color[2] = rgbColorArray[RGBIndex][2];
		}
		else {
			// 凡是高度值小于0的点全部上色为海蓝色
			color[0] = 0;
			color[1] = 69;
			color[2] = 107;
		}
		return color;
	}
	
}
